input {
    jdbc {
        # Postgres jdbc connection string to our database, mydb
        jdbc_connection_string => "jdbc:oracle:thin:@159.65.140.140:1521:orcl"
        # The user we wish to execute our statement as
        jdbc_user => "psp"
        jdbc_password => "psp"
        # The path to our downloaded jdbc driver
        jdbc_driver_library => "/Volumes/DATA/workspace/burger/psp/Lib/ojdbc7-12.1.0.2.jar"
        # The name of the driver class for Postgresql
        jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
	    lowercase_column_names => true
        # our query
        statement_filepath => "/Volumes/DATA/learning/elk/logstash-7.4.0/config/filters/aggregate_variants.sql"

        jdbc_paging_enabled => true
        tracking_column => "row_update_time"
        use_column_value => true
        tracking_column_type => "numeric"
        schedule => "*/5 * * * * *"
        clean_run => true
    }
}

filter{
    # ruby{
    #     path => 'sampleRuby.rb'
    # }
    aggregate {
       task_id => "%{s_product_id}"
       code => "
        require 'json'
        map['id'] = event.get('s_product_id')
        map['campaign_id'] = event.get('s_campaign_id')
        map['product_name'] ||= event.get('s_product_name')
        map['back_view'] ||= event.get('n_back_view')
        map['default'] ||= event.get('n_default')
        map['currency'] ||= event.get('s_currency')

        map['prices'] ||= JSON.parse(event.get('prices').to_s)

        map['variants'] ||= []
        
        mockups = JSON.parse(event.get('mockups').to_s)

        if mockups.count > 0 and !mockups[0]['id'] 
            mockups = []
        end

        map['variants'] << {
            'id' => event.get('s_id'),
            'product_id' => event.get('s_product_id'),
            'base_id' => event.get('s_base_id'),
            'name' => event.get('s_name'),
            'color_id' => event.get('s_color_id'),
            'color' => event.get('s_color_value'),
            'color_name' => event.get('s_color_name'),
            'front_design_id' => event.get('s_front_design_id'),
            'back_design_id' => event.get('s_back_design_id'),
            'image' => {
                'front' => event.get('s_front_img_url'),
                'back' => event.get('s_back_img_url')
            },
            'mockups' => mockups
        }

        
        event.cancel()
       "
       push_previous_map_as_event => true
       timeout => 3
     }
}
output {
    # stdout { codec => json_lines }
    elasticsearch {
        hosts => ["http://34.67.244.17:80"]
        index => "product"
        document_id=> "%{id}"
        document_type => "doc"
    }
}
