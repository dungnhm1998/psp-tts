input {
    jdbc {
        # Postgres jdbc connection string to our database, mydb
        jdbc_connection_string => "jdbc:oracle:thin:@167.99.7.109:1521:orcl"
        jdbc_user => "psp"
        jdbc_password => "psp"
        # jdbc_connection_string => "jdbc:oracle:thin:@159.65.140.140:1521:orcl"
        # jdbc_user => "psp001"
        # jdbc_password => "psp001"
        # The name of the driver class
        #jdbc_driver_library => "/Volumes/DATA/learning/elk/logstash-7.4.0/logstash-core/lib/jars/ojdbc7-12.1.0.2.jar"
        
        jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
        lowercase_column_names => true
        
        # our query
        #statement_filepath => "/Volumes/DATA/workspace/burger/psp/src/main/resources/elastic_mappings/ingest_camp_v2.sql"
        statement_filepath => "/etc/logstash/conf.d/ingest_camp_v2.sql"

        jdbc_paging_enabled => true
        tracking_column => "modified_at"
        use_column_value => true
        tracking_column_type => "timestamp"
        clean_run => true
        schedule => "0 */5 * * * *"
    }
}

filter {
    
    mutate {
        convert => {
          "price" => "float"
          "private" => "boolean"
          "relaunch" => "boolean"
          "back_view" => "boolean"
        }
    }
    ruby {
        code => "
            unless event.get('s_genders').nil?
                event.set('genders', event.get('s_genders').split(',')) ;
            end

            unless event.get('s_base_ids').nil?
                event.set('base_ids', event.get('s_base_ids').split(',')) ;
            end

            unless event.get('s_sizes').nil?
                event.set('size_ids', event.get('s_sizes').split(',')) ;
            end

            unless event.get('s_colors').nil?
                event.set('color_ids', event.get('s_colors').split(',')) ;
            end

            full_text = ''
            unless event.get('title').nil?
                full_text.concat(event.get('title'))
                full_text.concat(' ')
            end

            unless event.get('tags').nil?
                full_text.concat(event.get('tags'))
                full_text.concat(' ')
            end

            unless event.get('uri').nil?
                full_text.concat(event.get('uri'))
            end

            event.set('full_text', full_text)
        "
    }
    mutate {
        rename => ["user_id", "[entity][user_id]" ]
        rename => ["title", "[entity][title]" ]
        rename => ["s_desc", "[entity][desc]" ]
        rename => ["domain_id", "[entity][domain_id]" ]
        rename => ["domain", "[entity][domain]" ]
        rename => ["base_group_id", "[entity][base_group_id]" ]
        rename => ["seo_title", "[entity][seo_title]" ]
        rename => ["seo_desc", "[entity][seo_desc]" ]
        rename => ["seo_image_cover", "[entity][seo_image_cover]" ]
        rename => ["uri", "[entity][uri]" ]
        rename => ["tags", "[entity][tags]" ]
        rename => ["categories", "[entity][categories]" ]
        rename => ["private", "[entity][private]" ]
        rename => ["relaunch", "[entity][relaunch]" ]
        rename => ["created_date", "[entity][created_date]" ]
        rename => ["start_time", "[entity][start_time]" ]
        rename => ["end_time", "[entity][end_time]" ]
        rename => ["fb_pixel", "[entity][fb_pixel]" ]
        rename => ["gg_pixel", "[entity][gg_pixel]" ]
        rename => ["state", "[entity][state]" ]
        rename => ["design_front_url", "[entity][design_front_url]" ]
        rename => ["design_back_url", "[entity][design_back_url]" ]
        rename => ["back_view", "[entity][back_view]" ]
        rename => ["price", "[entity][price]" ]

        # rename => ["genders", "[entity][genders]" ]
        # rename => ["base_ids", "[entity][base_ids]" ]
        # rename => ["size_ids", "[entity][size_ids]" ]
        # rename => ["color_ids", "[entity][color_ids]" ]
        # rename => ["row_update_time", "[entity][row_update_time]" ]
    }

}
output {
    # stdout { codec => json_lines }
    elasticsearch {
        hosts => ["http://elastic.burgerprints.com:80"]
        index => "campaign_v2"
        document_id=> "%{id}"
    }
}