input {
    jdbc {
        # Postgres jdbc connection string to our database, mydb
        jdbc_connection_string => "jdbc:oracle:thin:@159.65.140.140:1521:orcl"
        jdbc_user => "psp001"
        jdbc_password => "psp001"
        # The path to our downloaded jdbc driver
        #jdbc_driver_library => ""
        # The name of the driver class for Postgresql
        jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
	    lowercase_column_names => true
        # our query
        statement_filepath => "/Volumes/DATA/workspace/burger/psp/src/main/resources/elastic_mappings/ingest_campaigns.sql"
        
        jdbc_paging_enabled => true
        tracking_column => "modified_at"
        use_column_value => true
        tracking_column_type => "timestamp"
        clean_run => true
        schedule => "*/5 * * * * *"
        
    }
}

filter {
    mutate { 
        rename => ["s_desc", "desc" ]
    }
    mutate {
        convert => {
          "price" => "float"
          "private" => "boolean"
          "relaunch" => "boolean"
          "back_view" => "boolean"
        }
    }
    # mutate { 
    #     add_field => { 
    #         "full_text" => "%{title} %{tags} %{uri}"
    #     }
    # }
    ruby {
        code => "
            full_text = ''
            unless event.get('title').nil?
                full_text.concat(event.get('title'))
                full_text.concat(' ')
            end

            unless event.get('tags').nil?
                full_text.concat(event.get('tags'))
                full_text.concat(' ')
            end

            unless event.get('uri').nil?
                full_text.concat(event.get('uri'))
            end

            entityWrapper = Hash.new
            hash = event.to_hash
            hash.each do |k,v|
                if 'id' != k && 'full_text' != k
                    entityWrapper[k] = v
                    event.remove(k)
                end
            end
            event.set('entity', entityWrapper)
            event.set('full_text', full_text)
        "
    }
   
}
output {
    # stdout { codec => json_lines }
    elasticsearch {
        # hosts => ["http://159.89.232.21:80"]
        # index => "campaigns"
        # document_id=> "%{id}"
        # document_type => "_doc"

        hosts => ["http://159.65.140.140:80"]
        index => "campaigns"
        document_id=> "%{id}"
    }
}
